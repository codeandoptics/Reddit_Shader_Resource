uniform sampler2D color_texture;uniform sampler2D back_texture;uniform float opacity;uniform int overlaymode;
uniform int width;
uniform int height;


vec3 RGBToHSV(vec3 color){


vec3 normcolor = color;

vec3 final;
float h,s,v;
float fmin = min(min(normcolor.x, normcolor.y), normcolor.z);
float fmax = max(max(normcolor.x, normcolor.y), normcolor.z);
float delta = fmax-fmin;

v = fmax;

	if (fmax != 0.0){s = delta/fmax;}
	else
	{
	final.x = -1.0;final.y = 0.0;final.z = v; return final;
	}


	if (normcolor.r==fmax){h = (normcolor.g-color.b)/delta;}
	else if (normcolor.g==fmax){h = 2.0+(normcolor.b-normcolor.r)/delta;}
	else {h = 4.0+(normcolor.r-normcolor.g)/delta;}

h = h*60.0;
if (h<0.0) {h = h+360.0;}

final.x = h;final.y = s;final.z = v; return final;
}





vec3 HSVToRGB(vec3 hsv){

vec3 final;

int i;
float f,p,q,t,R,G,B,htemp;


	if (hsv.y==0.0){R = hsv.x;G = hsv.x;B=hsv.x;}
	else
	{
		if (hsv.x==360.0)
		{htemp = 0.0;}
		else
		{htemp = hsv.x;}

	htemp = htemp/60.0;
	i = int(max(htemp,0.0));
	f = htemp - float(i);
	
	p = hsv.z*(1.0-hsv.y);
	q = hsv.z*(1.0-(hsv.y*f));
	t = hsv.z*(1.0-(hsv.y*(1.0-f)));

	if (i == 0){R=hsv.z;G=t;B=p;}
	else if (i == 1){R=q;G=hsv.z;B=p;}
	else if (i == 2){R=p;G=hsv.z;B=t;}
	else if (i == 3){R=p;G=q;B=hsv.z;}
	else if (i == 4){R=t;G=p;B=q;}
	else if (i == 5){R=hsv.z;G=p;B=q;}

	}

final.x = R; final.y = G; final.z = B;

return final;
}




float clampf(float d){
if (d>1.0) {return 1.0;}
if (d<0.0) {return 0.0;}
return d;
}


vec3 maxvec(vec3 a, vec3 b){

	if ((a.x+a.y+a.z)>(b.x+b.y+b.z)) 
	{
	return a;
	}
	else
	{
	return b;
	}
}

vec3 minvec(vec3 a, vec3 b){

	if ((a.x+a.y+a.z)<(b.x+b.y+b.z)) 
	{
	return a;
	}
	else
	{
	return b;
	}
}


float average(float a,float b){return clampf((a+b)*.5);}

float additive(float a, float b){return clampf((a+b));}

float subtractive(float a, float b){return (a+b-1.0);}

float multiply(float a, float b){return a*b/1.0;}

float screen(float a, float b){return 1.0-((1.0-a)*(1.0-b));}

float darken(float a, float b){return min(a,b);}

float lighten(float a, float b){return max(a,b);}

float difference(float a, float b){return clampf(abs(a-b));}

float negation(float a, float b){return clampf(1.0-abs(1.0-a-b));}

float exclusion(float a, float b){return average(difference(a,b),negation(a,b));}

float overlay(float a, float b){return (b < 0.5 ? (2.0 * b * a) : (1.0 - 2.0 * (1.0 - b) * (1.0 - a)));}

float hardlight(float a, float b){return overlay(b,a);}

float softlight(float a, float b){return ((a < 0.5) ? (2.0 * b * a + b * b * (1.0 - 2.0 * a)) : (sqrt(b) * (2.0 * a - 1.0) + 2.0 * b * (1.0 - a)));}

float pinlight(float a,float b){return ((a < 0.5) ? darken(b, (2.0 * a)) : lighten(b, (2.0 *(a - 0.5))));}

float colorburn(float a,float b){return (a == 0.0) ? 0.0 : max(min(1.0 - (((1.0 - b) *1.0)/ a),1.0),0.0);}

float colordodge(float a,float b){return (a == 1.0) ? 1.0 : max(min((b*1.0)/(1.0 - a), 1.0),0.0);}

float colorburninv(float a,float b){return (b==0.0) ? 0.0 : max(min(1.0-(((1.0-a)*1.0)/b),0.0),1.0);}

float colordodgeinv(float a,float b){return (b == 1.0) ? 1.0 : max(min((a*1.0)/(1.0 - b), 1.0),0.0);}

float vividlight(float a,float b){return ((a < 0.5) ? colorburn(b, (2.0 * a)) : colordodge(b, (2.0 * (a - 0.5))));}

float linearlight(float a,float b){return (a < 0.5 ? subtractive(b, (2.0 * a)) : additive(b, (2.0 * (a - 0.5))));}

float hardmix(float a,float b){return ((vividlight(b, a) < 0.5) ? 0.0 : 1.0);}

float reflect(float a,float b){return ((a == 1.0) ? a : min(b * b / (1.0 - a), 1.0));}


vec4 Blend(vec4 Front,vec4 Back,float trans){

vec4 finalcolor;
vec3 fronthsv;
vec3 backhsv;
vec3 blended;
vec3 hsv1,hsv2,rgb;



		if (overlaymode == 0){
			blended.rgb = Front.rgb;}


		else if (overlaymode == 1){
			blended.r = additive(Front.r,Back.r);
			blended.g = additive(Front.g,Back.g);
			blended.b = additive(Front.b,Back.b);}
		else if (overlaymode == 2){
			blended.r = average(Front.r,Back.r);
			blended.g = average(Front.g,Back.g);
			blended.b = average(Front.b,Back.b);}
		else if (overlaymode == 3){
			blended.r = colorburn(Front.r,Back.r);
			blended.g = colorburn(Front.g,Back.g);
			blended.b = colorburn(Front.b,Back.b);}
		else if (overlaymode == 4){
			blended.r = colorburninv(Front.r,Back.r);
			blended.g = colorburninv(Front.g,Back.g);
			blended.b = colorburninv(Front.b,Back.b);}
		else if (overlaymode == 5){
			blended.r = colordodge(Front.r,Back.r);
			blended.g = colordodge(Front.g,Back.g);
			blended.b = colordodge(Front.b,Back.b);}
		else if (overlaymode == 6){
			blended.r = colordodgeinv(Front.r,Back.r);
			blended.g = colordodgeinv(Front.g,Back.g);
			blended.b = colordodgeinv(Front.b,Back.b);}
		else if (overlaymode == 7){
			blended.r = darken(Front.r,Back.r);
			blended.g = darken(Front.g,Back.g);
			blended.b = darken(Front.b,Back.b);}
		else if (overlaymode == 8){
			blended.r = difference(Front.r,Back.r);
			blended.g = difference(Front.g,Back.g);
			blended.b = difference(Front.b,Back.b);}
		else if (overlaymode == 9){
			blended.r = exclusion(Front.r,Back.r);
			blended.g = exclusion(Front.g,Back.g);
			blended.b = exclusion(Front.b,Back.b);}
		else if (overlaymode == 10){
			blended.r = hardlight(Front.r,Back.r);
			blended.g = hardlight(Front.g,Back.g);
			blended.b = hardlight(Front.b,Back.b);}
		else if (overlaymode == 11){
			blended.r = lighten(Front.r,Back.r);
			blended.g = lighten(Front.g,Back.g);
			blended.b = lighten(Front.b,Back.b);}
		else if (overlaymode == 12){
			blended.r = multiply(Front.r,Back.r);
			blended.g = multiply(Front.g,Back.g);
			blended.b = multiply(Front.b,Back.b);}
		else if (overlaymode == 13){
			blended.r = negation(Front.r,Back.r);
			blended.g = negation(Front.g,Back.g);
			blended.b = negation(Front.b,Back.b);}
		else if (overlaymode == 14){
			blended.r = overlay(Front.r,Back.r);
			blended.g = overlay(Front.g,Back.g);
			blended.b = overlay(Front.b,Back.b);}
		else if (overlaymode == 15){
			blended.r = pinlight(Front.r,Back.r);
			blended.g = pinlight(Front.g,Back.g);
			blended.b = pinlight(Front.b,Back.b);}
		else if (overlaymode == 16){
			blended.r = screen(Front.r,Back.r);
			blended.g = screen(Front.g,Back.g);
			blended.b = screen(Front.b,Back.b);}
		else if (overlaymode == 17){
			blended.r = softlight(Front.r,Back.r);
			blended.g = softlight(Front.g,Back.g);
			blended.b = softlight(Front.b,Back.b);}
		else if (overlaymode == 18){
			blended.r = subtractive(Front.r,Back.r);
			blended.g = subtractive(Front.g,Back.g);
			blended.b = subtractive(Front.b,Back.b);}

		else if (overlaymode == 19){ 
			hsv1 = RGBToHSV(Front.rgb);
			hsv2 = RGBToHSV(Back.rgb);
			vec3 fin = HSVToRGB(vec3(hsv1.r,hsv2.g,hsv2.b));
			blended.rgb = fin;
			}

		else if (overlaymode == 20){ 
			hsv1 = RGBToHSV(Front.rgb);
			hsv2 = RGBToHSV(Back.rgb);
			vec3 fin = HSVToRGB(vec3(hsv2.r,hsv1.g,hsv2.b));
			blended.rgb = fin;
			}

		else if (overlaymode == 21){ 
			hsv1 = RGBToHSV(Front.rgb);
			hsv2 = RGBToHSV(Back.rgb);
			vec3 fin = HSVToRGB(vec3(hsv1.r,hsv1.g,hsv2.b));
			blended.rgb = fin;
			}

		else if (overlaymode == 22){ 
			hsv1 = RGBToHSV(Front.rgb);
			hsv2 = RGBToHSV(Back.rgb);
			hsv2.z = hsv1.z;
			blended.rgb = HSVToRGB(hsv2);
			}


		else if (overlaymode == 23){
			blended.rgb = minvec(Front.rgb,Back.rgb);
			}

		else if (overlaymode == 24){
			blended.rgb = maxvec(Front.rgb,Back.rgb);
			}

		else if (overlaymode == 25){
			blended.r = vividlight(Front.r,Back.r);
			blended.g = vividlight(Front.g,Back.g);
			blended.b = vividlight(Front.b,Back.b);}

		else if (overlaymode == 26){
			blended.r = linearlight(Front.r,Back.r);
			blended.g = linearlight(Front.g,Back.g);
			blended.b = linearlight(Front.b,Back.b);}

		else if (overlaymode == 27){
			blended.r = hardmix(Front.r,Back.r);
			blended.g = hardmix(Front.g,Back.g);
			blended.b = hardmix(Front.b,Back.b);}

		else if (overlaymode == 28){
			blended.r = reflect(Front.r,Back.r);
			blended.g = reflect(Front.g,Back.g);
			blended.b = reflect(Front.b,Back.b);}



		else {blended.rgb = Front.rgb;}





finalcolor.rgb = blended.rgb;
finalcolor.a = Front.a*opacity;

return finalcolor;


}




void main() {
vec2 resolution = vec2(float(width), float(height));

vec4 color = texture2D(color_texture,gl_TexCoord[0].st).rgba;
vec4 colorback = vec4(texture2D(back_texture, gl_FragCoord.xy/resolution)).rgba;

vec4 finalcolor = Blend(color,colorback,opacity);
gl_FragColor = finalcolor;}